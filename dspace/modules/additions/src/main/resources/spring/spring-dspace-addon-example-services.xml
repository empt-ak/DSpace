<?xml version="1.0" encoding="UTF-8"?>
<!--

    The contents of this file are subject to the license and copyright
    detailed in the LICENSE and NOTICE files at the root of the source
    tree and available online at

    http://www.dspace.org/license/

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!-- 
        allows us to use spring annotations in beans 
    -->
    <context:annotation-config/> 
    
    <!--
        where to look
    -->
    <context:component-scan base-package="cz.muni.ics" /> 

    <!--
        import configurations of modules
    -->
    <import resource="celebrityModule.xml" />
    <import resource="monographModule.xml" />
    
    
    
    <!--
        command lines
    -->
    <bean
        id="commandLineParser"
        class="org.apache.commons.cli.DefaultParser"
    />

    <bean
        id="helpFormatter"
        class="org.apache.commons.cli.HelpFormatter"
        p:optionComparator-ref="optionComparator"
    />
    
    <bean
        id="commandLineService"
        class="cz.muni.ics.digilaw.services.io.CommandLineServiceImpl"
    >
        <lookup-method
            name="getDeleteCommandLine"
            bean="deleteCommandLine"
        />
        <lookup-method
            name="getImportCommandLine"
            bean="importCommandLine"
        />
        <lookup-method
            name="getMovingWallCommandLine"
            bean="movingWallCommandLine"
        />
        <lookup-method 
            name="getInitCommandLine"
            bean="initCommandLine"
        />
        
    </bean>
    
    <bean
        id="userOption"
        class="org.apache.commons.cli.Option"
        c:opt="#{null}"
        c:longOpt="user"
        c:hasArg="true"
        c:description="OPTIONAL. User under which import should be executed. If parameter is not used, then first one ever created (administrator) will be used."
    >
        <property name="required" value="false" />
        <property name="argName" value="user" />
    </bean>
    
    <bean
        id="deleteCommandLine"
        class="cz.muni.ics.digilaw.services.io.DeleteCommandLine"
        p:subClass="cz.muni.ics.dspace5.Delete"
    >
        <property name="options">
            <list>
                <ref bean="userOption" />
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="value"
                    c:hasArg="true"
                    c:description="REQUIRED. either handle, or path based on --method value. By default --method is set to handle so value should be handle with prefix. If --method=path, then value should be path inside MEditor base."
                >
                    <property name="required" value="true" />
                    <property name="argName" value="value" />
                </bean>
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="method"
                    c:hasArg="true"
                    c:description="OPTIONAL. Can be either 'handle', which deletes object and its descendants by handle value specified by --value option, or 'path' which deletes by path specified again by --value option. By default set to 'handle'."
                >
                    <property name="required" value="false" />
                    <property name="argName" value="method" />
                </bean>
            </list>
        </property>
    </bean>
    
    <!--
        set is used because .contains() runs in O(1), 
        if we used list it would be O(n)
    -->
    <util:set id="movingWallOptions">
        <value>lock</value>
        <value>unlock</value>
        <value>auto</value>
        <value>off</value>
    </util:set>
    
    <bean
        id="importCommandLine"
        class="cz.muni.ics.digilaw.services.io.ImportCommandLine"
        p:subClass="cz.muni.ics.dspace5.Import"
        p:movingWallOptions-ref="movingWallOptions"
    >
        <property name="options">
            <list>
                <ref bean="userOption" />
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="value"
                    c:hasArg="true"
                    c:description="REQUIRED. Path to be imported inside DSpace. Value should be already as part of path e.g. serial/6_SomeSerial"
                >
                    <property name="required" value="true" />
                    <property name="argName" value="value" />
                </bean>
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="method"
                    c:hasArg="true"
                    c:description="OPTIONAL. Can be either 'single', which updates only current object and its parents, or 'all' which includes parents, object and its ancestors. By default value is set to 'all'."
                >
                    <property name="required" value="false" />
                    <property name="argName" value="method" />
                </bean>
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="movingwall"
                    c:hasArg="true"
                    c:description="OPTIONAL. Whether moving wall should or should ne be executed, based on parameter value. Values can be 'lock', with which all objects are locked, if they should be, 'unlock', which unlocks all objects, when they should not be under restriction, 'auto' for locking objects if they should be locked, and unlocking if they should not be and 'off' for ignoring restriction setting. By default set to 'auto'."
                >
                    <property name="required" value="false" />
                    <property name="argName" value="movingwall" />
                </bean>
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="check"
                    c:hasArg="false"
                    c:description="OPTIONAL. If files should be prechecked first, values can be 'true', or 'false' which results in desired behaviour. By default set to 'false'"
                >
                    <property name="required" value="false" />
                </bean>                
            </list>
        </property>
    </bean>
    
    <bean
        id="movingWallCommandLine"
        class="cz.muni.ics.digilaw.services.io.MovingWallCommandLine"
        p:subClass="cz.muni.ics.dspace5.MovingWall"
        p:movingWallOptions-ref="movingWallOptions"
    >
        <property name="options">
            <util:list>
                <ref
                    bean="userOption"
                />
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="value"
                    c:hasArg="true"
                    c:description="REQUIRED. Path to be imported inside DSpace. Value should be already as part of path e.g. serial/6_SomeSerial"
                >
                    <property name="required" value="true" />
                    <property name="argName" value="value" />
                </bean>
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="method"
                    c:hasArg="true"
                    c:description="not implemented yet"
                >
                    <property name="required" value="false" />
                    <property name="argName" value=" method"/> 
                </bean>
            </util:list>
        </property>
    </bean>
    
    <bean
        id="initCommandLine"
        class="cz.muni.ics.digilaw.services.io.InitCommandLine"
        p:subClass="cz.muni.ics.dspace5.Init">
    
        <property name="options">
            <list>
                <ref bean="userOption" />
                <bean
                    class="org.apache.commons.cli.Option"
                    c:opt="#{null}"
                    c:longOpt="init"
                    c:hasArg="true"
                    c:description="OPTIONAL. Init params. TODO"
                >
                    <property name="required" value="false" />
                    <property name="argName" value="init" />
                </bean>                
            </list>
        </property>
    </bean>
    
    <bean
        id="jaxbc"
        class="javax.xml.bind.JAXBContext"
        factory-method="newInstance"
    >
        <constructor-arg>
            <list>
<!--                <value>cz.muni.ics.digilaw.domain.Periodical</value>
                <value>cz.muni.ics.digilaw.domain.Volume</value>
                <value>cz.muni.ics.digilaw.domain.Issue</value>
                <value>cz.muni.ics.digilaw.domain.Article</value>-->
                <value>cz.muni.ics.digilaw.domain.MonographicSeries</value>
                <value>cz.muni.ics.digilaw.domain.Volume</value>
                <value>cz.muni.ics.digilaw.domain.Monography</value>
                <value>cz.muni.ics.digilaw.domain.MonographyChapter</value>
                <value>cz.muni.ics.digilaw.service.io.references.References</value>
                <value>cz.muni.ics.digilaw.domain.ArticleMeta</value>
            </list>
        </constructor-arg>
    </bean>
    
    <bean
        id="unmarshaller"
        class="javax.xml.bind.Unmarshaller"
        factory-bean="jaxbc"
        factory-method="createUnmarshaller"
    />
    
    <bean
        id="objectWrapper"
        class="cz.muni.ics.digilaw.ObjectWrapperImpl"
        scope="prototype"
    />
    
    <bean
        id="issuePathComparator"
        class="cz.muni.ics.dspace5.comparators.IssuePathComparator"
    />
    
    <bean
        id="articlePathComparator"
        class="cz.muni.ics.dspace5.comparators.ArticlePathComparator"
    />
    
    <bean
        id="optionComparator"
        class="cz.muni.ics.dspace5.comparators.OptionComparator"
    />
    
    <bean
        id="comparatorFactory"
        class="cz.muni.ics.dspace5.comparators.ComparatorFactory"
    >
        <lookup-method
            name="provideIssuePathComparator"
            bean="issuePathComparator"
        />        
        <lookup-method
            name="provideArticlePathComparator"
            bean="articlePathComparator"
        />
        <lookup-method
            name="provideOptionComparator"
            bean="optionComparator"
        />
    </bean>
    
    <bean
        id="objectWrapperFactory"
        class="cz.muni.ics.dspace5.impl.ObjectWrapperFactoryImpl"
    >
        <lookup-method
            name="createObjectWrapper"
            bean="objectWrapper"
        />
    </bean>
    
    <bean
        id="mapper"
        class="org.dozer.DozerBeanMapper"
        scope="singleton"
    >
        <property name="mappingFiles">
            <list>
                <value>dozer-mapping.xml</value>
                <value>monograph-mapping.xml</value>
            </list>
        </property>
        <property name="customConvertersWithId">
            <map>
                <entry key="simpleconverter" value-ref="simpleElementConverter" />
                <entry key="composedconverter" value-ref="composedElementConverter" />
                <entry key="contributorconverter" value-ref="contributorConverter" />
                <entry key="authorconverter" value-ref="authorConverter" />
                <entry key="relateddocumentconverter" value-ref="relatedDocumentConverter" />
                <entry key="lawsubjectconverter" value-ref="lawSubjectConverter" />
            </map>
        </property>
    </bean> 
    
    <bean
        id="simpleElementConverter"
        class="cz.muni.ics.digilaw.convertors.SimpleElementConverter"
    />      
            
    <bean
        id="composedElementConverter"
        class="cz.muni.ics.digilaw.convertors.ComposedElementConverter"
    />
    
    <bean
        id="relatedDocumentConverter"
        class="cz.muni.ics.digilaw.convertors.RelatedDocumentConverter"
    />
    
    <bean
        id="lawSubjectConverter"
        class="cz.muni.ics.digilaw.convertors.LawSubjectConverter"
    />
    
    <bean 
        id="contributorConverter"
        class="cz.muni.ics.digilaw.convertors.ContributorConvertor"
    />
    
    <bean
        id="authorConverter"
        class="cz.muni.ics.digilaw.convertors.AuthorConverter"
    />
        
    <bean
        id="documentBuilderFactory"
        class="javax.xml.parsers.DocumentBuilderFactory"
        factory-method="newInstance"
    />
    
    <bean
        id="documentBuilder"
        class="javax.xml.parsers.DocumentBuilder"
        factory-bean="documentBuilderFactory"
        factory-method="newDocumentBuilder"
    />
    
    <bean
        id="xPathFactory"
        class="javax.xml.xpath.XPathFactory"
        factory-method="newInstance"
    />
    
    <bean
        id="xPath"
        class="javax.xml.xpath.XPath"
        factory-bean="xPathFactory"
        factory-method="newXPath"
    /> 
    
    <bean
        id="collectionLocker"
        class="cz.muni.ics.digilaw.movingwall.CollectionMWLocker"
    />
    
    <bean
        id="bitstreamLocker"
        class="cz.muni.ics.digilaw.movingwall.BitstreamMWLocker"
    />
    
    <bean
        id="mwLockerProvider"
        class="cz.muni.ics.digilaw.movingwall.MWLockerProviderImpl"
    >
        <property name="implementedClasses">
            <list>
                <value>org.dspace.content.Bitstream</value>
                <value>org.dspace.content.Collection</value>
            </list>
        </property>
        <lookup-method
            name="getCollectionLocker"
            bean="collectionLocker"
        />
        <lookup-method
            name="getBitstreamLocker"
            bean="bitstreamLocker"
        />
    </bean>
    
    <bean
        id="moduleManager"
        class="cz.muni.ics.dspace5.impl.ModuleManagerImpl"
    >
        <property name="availableModules">
            <map>
                <entry key="celebrity" value-ref="celebrityModule" />
                <entry key="monograph" value-ref="monographModule" />
            </map>
        </property>
    </bean>
    
    <bean
        id="deleteObjectService"
        class="cz.muni.ics.dspace5.impl.io.DeleteObjectService"
    />
    
    <bean
        id="importAndMovingWallObjectService"
        class="cz.muni.ics.dspace5.impl.io.ImportAndMovingWallObjectService"
    />
    
    <bean 
        id="initObjectService"
        class= "cz.muni.ics.dspace5.impl.io.InitObjectService" />
    
    <bean
        id="dspaceExecutor"
        class="cz.muni.ics.dspace5.impl.io.DSpaceExecutorImpl"
    >
        <property name="dspaceServices">
            <map>
                <entry key="delete" value-ref="deleteObjectService" />
                <entry key="import" value-ref="importAndMovingWallObjectService" />
                <entry key="movingwall" value-ref="importAndMovingWallObjectService" />
                <entry key="init" value-ref="initObjectService" />
            </map>
        </property>
    </bean>
</beans>
